var _terezka$elm_plot$Plot$point = function (_p0) {
	var _p1 = _p0;
	return A2(_terezka$elm_plot$Internal_Draw$Point, _p1.x, _p1.y);
};
var _terezka$elm_plot$Plot$points = _elm_lang$core$List$map(_terezka$elm_plot$Plot$point);
var _terezka$elm_plot$Plot$niceInterval = F3(
	function (min, max, total) {
		var range = _elm_lang$core$Basics$abs(max - min);
		var delta0 = range / _elm_lang$core$Basics$toFloat(total);
		var mag = _elm_lang$core$Basics$floor(
			A2(_elm_lang$core$Basics$logBase, 10, delta0));
		var magPow = _elm_lang$core$Basics$toFloat(
			Math.pow(10, mag));
		var magMsd = _elm_lang$core$Basics$round(delta0 / magPow);
		var magMsdFinal = (_elm_lang$core$Native_Utils.cmp(magMsd, 5) > 0) ? 10 : ((_elm_lang$core$Native_Utils.cmp(magMsd, 2) > 0) ? 5 : ((_elm_lang$core$Native_Utils.cmp(magMsd, 1) > 0) ? 1 : magMsd));
		return _elm_lang$core$Basics$toFloat(magMsdFinal) * magPow;
	});
var _terezka$elm_plot$Plot$count = F4(
	function (delta, lowest, range, firstValue) {
		return _elm_lang$core$Basics$floor(
			(range - (_elm_lang$core$Basics$abs(lowest) - _elm_lang$core$Basics$abs(firstValue))) / delta);
	});
var _terezka$elm_plot$Plot$ceilToNearest = F2(
	function (precision, value) {
		return _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$ceiling(value / precision)) * precision;
	});
var _terezka$elm_plot$Plot$firstValue = F2(
	function (delta, lowest) {
		return A2(_terezka$elm_plot$Plot$ceilToNearest, delta, lowest);
	});
var _terezka$elm_plot$Plot$deltaPrecision = function (delta) {
	return _elm_lang$core$Basics$abs(
		A2(
			_elm_lang$core$Basics$min,
			0,
			A2(
				F2(
					function (x, y) {
						return x - y;
					}),
				1,
				_elm_lang$core$String$length(
					A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$map,
								function (_) {
									return _.match;
								},
								A3(
									_elm_lang$core$Regex$find,
									_elm_lang$core$Regex$AtMost(1),
									_elm_lang$core$Regex$regex('\\.[0-9]*'),
									_elm_lang$core$Basics$toString(delta)))))))));
};
var _terezka$elm_plot$Plot$tickPosition = F3(
	function (delta, firstValue, index) {
		return A2(
			_elm_lang$core$Result$withDefault,
			0,
			_elm_lang$core$String$toFloat(
				A2(
					_myrho$elm_round$Round$round,
					_terezka$elm_plot$Plot$deltaPrecision(delta),
					firstValue + (_elm_lang$core$Basics$toFloat(index) * delta))));
	});
var _terezka$elm_plot$Plot$remove = F2(
	function (banned, values) {
		return A2(
			_elm_lang$core$List$filter,
			function (v) {
				return !_elm_lang$core$Native_Utils.eq(v, banned);
			},
			values);
	});
var _terezka$elm_plot$Plot$interval = F3(
	function (offset, delta, _p2) {
		var _p3 = _p2;
		var _p4 = _p3.min;
		var value = A2(_terezka$elm_plot$Plot$firstValue, delta, _p4) + offset;
		var range = _elm_lang$core$Basics$abs(_p4 - _p3.max);
		var indexes = A2(
			_elm_lang$core$List$range,
			0,
			A4(_terezka$elm_plot$Plot$count, delta, _p4, range, value));
		return A2(
			_elm_lang$core$List$map,
			A2(_terezka$elm_plot$Plot$tickPosition, delta, value),
			indexes);
	});
var _terezka$elm_plot$Plot$decentPositions = function (summary) {
	return (_elm_lang$core$Native_Utils.cmp(summary.length, 600) > 0) ? A3(
		_terezka$elm_plot$Plot$interval,
		0,
		A3(_terezka$elm_plot$Plot$niceInterval, summary.min, summary.max, 10),
		summary) : A3(
		_terezka$elm_plot$Plot$interval,
		0,
		A3(_terezka$elm_plot$Plot$niceInterval, summary.min, summary.max, 5),
		summary);
};
var _terezka$elm_plot$Plot$viewLabel = F2(
	function (attributes, string) {
		return A2(
			_elm_lang$svg$Svg$text_,
			attributes,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$tspan,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg$text(string),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _terezka$elm_plot$Plot$viewTickInner = F3(
	function (attributes, width, height) {
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$x2(
					_elm_lang$core$Basics$toString(width)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$y2(
						_elm_lang$core$Basics$toString(height)),
					_1: attributes
				}
			},
			{ctor: '[]'});
	});
var _terezka$elm_plot$Plot$viewAxisLine = F3(
	function (summary, at, axisLine) {
		var _p5 = axisLine;
		if (_p5.ctor === 'Just') {
			return A2(
				_terezka$elm_plot$Internal_Draw$draw,
				_p5._0.attributes,
				A2(
					_terezka$elm_plot$Internal_Draw$linear,
					summary,
					{
						ctor: '::',
						_0: at(_p5._0.start),
						_1: {
							ctor: '::',
							_0: at(_p5._0.end),
							_1: {ctor: '[]'}
						}
					}));
		} else {
			return _elm_lang$svg$Svg$text('');
		}
	});
var _terezka$elm_plot$Plot$viewGlitterLines = F2(
	function (summary, _p6) {
		var _p7 = _p6;
		return {
			ctor: '::',
			_0: A3(
				_terezka$elm_plot$Plot$viewAxisLine,
				summary,
				function (y) {
					return {x: _p7.x, y: y};
				},
				A2(
					_elm_lang$core$Maybe$map,
					function (toLine) {
						return toLine(summary.y);
					},
					_p7.xLine)),
			_1: {
				ctor: '::',
				_0: A3(
					_terezka$elm_plot$Plot$viewAxisLine,
					summary,
					function (x) {
						return {x: x, y: _p7.y};
					},
					A2(
						_elm_lang$core$Maybe$map,
						function (toLine) {
							return toLine(summary.x);
						},
						_p7.yLine)),
				_1: {ctor: '[]'}
			}
		};
	});
var _terezka$elm_plot$Plot$viewActualVerticalAxis = F3(
	function (summary, _p8, glitterTicks) {
		var _p9 = _p8;
		var _p14 = _p9.flipAnchor;
		var anchorOfLabel = _p14 ? 'text-anchor: start;' : 'text-anchor: end;';
		var positionOfLabel = _p14 ? 10 : -10;
		var lengthOfTick = function (length) {
			return _p14 ? length : (0 - length);
		};
		var at = function (y) {
			return {
				x: A2(_p9.position, summary.x.min, summary.x.max),
				y: y
			};
		};
		var viewTickLine = function (_p10) {
			var _p11 = _p10;
			return A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: A4(
						_terezka$elm_plot$Internal_Draw$place,
						summary,
						at(_p11.position),
						0,
						0),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_terezka$elm_plot$Plot$viewTickInner,
						_p11.attributes,
						lengthOfTick(_p11.length),
						0),
					_1: {ctor: '[]'}
				});
		};
		var viewLabel = function (_p12) {
			var _p13 = _p12;
			return A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: A4(
						_terezka$elm_plot$Internal_Draw$place,
						summary,
						at(_p13.position),
						positionOfLabel,
						5),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style(anchorOfLabel),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _p13.view,
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__vertical-axis'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_terezka$elm_plot$Plot$viewAxisLine, summary, at, _p9.axisLine),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__ticks'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							viewTickLine,
							A2(_elm_lang$core$Basics_ops['++'], _p9.ticks, glitterTicks))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__labels'),
								_1: {ctor: '[]'}
							},
							A2(_elm_lang$core$List$map, viewLabel, _p9.labels)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _terezka$elm_plot$Plot$viewVerticalAxis = F3(
	function (summary, axis, moreTicks) {
		var _p15 = axis;
		if (_p15.ctor === 'Axis') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$svg$Svg$map,
					_elm_lang$core$Basics$never,
					A3(
						_terezka$elm_plot$Plot$viewActualVerticalAxis,
						summary,
						_p15._0(summary.y),
						moreTicks)));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _terezka$elm_plot$Plot$viewActualHorizontalAxis = F4(
	function (summary, _p16, glitterLabels, glitterTicks) {
		var _p17 = _p16;
		var _p22 = _p17.flipAnchor;
		var positionOfLabel = _p22 ? -10 : 20;
		var lengthOfTick = function (length) {
			return _p22 ? (0 - length) : length;
		};
		var at = function (x) {
			return {
				x: x,
				y: A2(_p17.position, summary.y.min, summary.y.max)
			};
		};
		var viewTickLine = function (_p18) {
			var _p19 = _p18;
			return A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: A4(
						_terezka$elm_plot$Internal_Draw$place,
						summary,
						at(_p19.position),
						0,
						0),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_terezka$elm_plot$Plot$viewTickInner,
						_p19.attributes,
						0,
						lengthOfTick(_p19.length)),
					_1: {ctor: '[]'}
				});
		};
		var viewLabel = function (_p20) {
			var _p21 = _p20;
			return A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: A4(
						_terezka$elm_plot$Internal_Draw$place,
						summary,
						at(_p21.position),
						0,
						positionOfLabel),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style('text-anchor: middle;'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _p21.view,
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__horizontal-axis'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_terezka$elm_plot$Plot$viewAxisLine, summary, at, _p17.axisLine),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__ticks'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							viewTickLine,
							A2(_elm_lang$core$Basics_ops['++'], _p17.ticks, glitterTicks))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__labels'),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$List$map,
								viewLabel,
								A2(_elm_lang$core$Basics_ops['++'], _p17.labels, glitterLabels))),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _terezka$elm_plot$Plot$viewHorizontalAxis = F4(
	function (summary, axis, moreLabels, moreTicks) {
		var _p23 = axis;
		if (_p23.ctor === 'Axis') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$svg$Svg$map,
					_elm_lang$core$Basics$never,
					A4(
						_terezka$elm_plot$Plot$viewActualHorizontalAxis,
						summary,
						_p23._0(summary.x),
						moreLabels,
						moreTicks)));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _terezka$elm_plot$Plot$viewTriangle = function (color) {
	return A2(
		_elm_lang$svg$Svg$polygon,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$points('0,-5 5,5 -5,5'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$transform('translate(0, -2.5)'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(color),
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'});
};
var _terezka$elm_plot$Plot$viewDiamond = F3(
	function (width, height, color) {
		return A2(
			_elm_lang$svg$Svg$rect,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width(
					_elm_lang$core$Basics$toString(width)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height(
						_elm_lang$core$Basics$toString(height)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('rotate(45)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString((0 - width) / 2)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString((0 - height) / 2)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('transparent'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill(color),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _terezka$elm_plot$Plot$viewSquare = F2(
	function (width, color) {
		return A2(
			_elm_lang$svg$Svg$rect,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width(
					_elm_lang$core$Basics$toString(width)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height(
						_elm_lang$core$Basics$toString(width)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString((0 - width) / 2)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString((0 - width) / 2)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('transparent'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill(color),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _terezka$elm_plot$Plot$viewCircle = F2(
	function (radius, color) {
		return A2(
			_elm_lang$svg$Svg$circle,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$r(
					_elm_lang$core$Basics$toString(radius)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$stroke('transparent'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(color),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'});
	});
var _terezka$elm_plot$Plot$viewDataPoint = F2(
	function (plotSummary, _p24) {
		var _p25 = _p24;
		var _p26 = _p25.view;
		if (_p26.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: A4(
							_terezka$elm_plot$Internal_Draw$place,
							plotSummary,
							{x: _p25.x, y: _p25.y},
							0,
							0),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _p26._0,
						_1: {ctor: '[]'}
					}));
		}
	});
var _terezka$elm_plot$Plot$viewDataPoints = F2(
	function (plotSummary, dataPoints) {
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__series__points'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_elm_lang$core$List$map,
					_terezka$elm_plot$Plot$viewDataPoint(plotSummary),
					dataPoints)));
	});
var _terezka$elm_plot$Plot$viewActualHorizontalGrid = F2(
	function (summary, gridLines) {
		var viewGridLine = function (_p27) {
			var _p28 = _p27;
			var _p29 = _p28.position;
			return A2(
				_terezka$elm_plot$Internal_Draw$draw,
				_p28.attributes,
				A2(
					_terezka$elm_plot$Internal_Draw$linear,
					summary,
					{
						ctor: '::',
						_0: {x: summary.x.min, y: _p29},
						_1: {
							ctor: '::',
							_0: {x: summary.x.max, y: _p29},
							_1: {ctor: '[]'}
						}
					}));
		};
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__vertical-grid'),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$map, viewGridLine, gridLines));
	});
var _terezka$elm_plot$Plot$viewHorizontalGrid = F2(
	function (summary, grid) {
		var _p30 = grid;
		if (_p30.ctor === 'Grid') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$svg$Svg$map,
					_elm_lang$core$Basics$never,
					A2(
						_terezka$elm_plot$Plot$viewActualHorizontalGrid,
						summary,
						_p30._0(summary.y))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _terezka$elm_plot$Plot$viewActualVerticalGrid = F2(
	function (summary, gridLines) {
		var viewGridLine = function (_p31) {
			var _p32 = _p31;
			var _p33 = _p32.position;
			return A2(
				_terezka$elm_plot$Internal_Draw$draw,
				_p32.attributes,
				A2(
					_terezka$elm_plot$Internal_Draw$linear,
					summary,
					{
						ctor: '::',
						_0: {x: _p33, y: summary.y.min},
						_1: {
							ctor: '::',
							_0: {x: _p33, y: summary.y.max},
							_1: {ctor: '[]'}
						}
					}));
		};
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__horizontal-grid'),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$map, viewGridLine, gridLines));
	});
var _terezka$elm_plot$Plot$viewVerticalGrid = F2(
	function (summary, grid) {
		var _p34 = grid;
		if (_p34.ctor === 'Grid') {
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$svg$Svg$map,
					_elm_lang$core$Basics$never,
					A2(
						_terezka$elm_plot$Plot$viewActualVerticalGrid,
						summary,
						_p34._0(summary.x))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _terezka$elm_plot$Plot$defaultPlotSummary = {
	x: {
		min: 0.0,
		max: 1.0,
		all: {ctor: '[]'}
	},
	y: {
		min: 0.0,
		max: 1.0,
		all: {ctor: '[]'}
	}
};
var _terezka$elm_plot$Plot$toPlotSummary = F3(
	function (customizations, toNiceReach, points) {
		var foldAxis = F2(
			function (summary, v) {
				return {
					min: A2(_elm_lang$core$Basics$min, summary.min, v),
					max: A2(_elm_lang$core$Basics$max, summary.max, v),
					all: {ctor: '::', _0: v, _1: summary.all}
				};
			});
		var foldPlot = F2(
			function (_p35, result) {
				var _p36 = _p35;
				var _p40 = _p36.y;
				var _p39 = _p36.x;
				var _p37 = result;
				if (_p37.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Just(
						{
							x: {
								min: _p39,
								max: _p39,
								all: {
									ctor: '::',
									_0: _p39,
									_1: {ctor: '[]'}
								}
							},
							y: {
								min: _p40,
								max: _p40,
								all: {
									ctor: '::',
									_0: _p40,
									_1: {ctor: '[]'}
								}
							}
						});
				} else {
					var _p38 = _p37._0;
					return _elm_lang$core$Maybe$Just(
						{
							x: A2(foldAxis, _p38.x, _p39),
							y: A2(foldAxis, _p38.y, _p40)
						});
				}
			});
		var plotSummary = toNiceReach(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_terezka$elm_plot$Plot$defaultPlotSummary,
				A3(_elm_lang$core$List$foldl, foldPlot, _elm_lang$core$Maybe$Nothing, points)));
		return {
			x: {
				min: customizations.toRangeLowest(plotSummary.x.min),
				max: customizations.toRangeHighest(plotSummary.x.max),
				dataMin: plotSummary.x.min,
				dataMax: plotSummary.x.max,
				length: _elm_lang$core$Basics$toFloat(customizations.width),
				marginLower: _elm_lang$core$Basics$toFloat(customizations.margin.left),
				marginUpper: _elm_lang$core$Basics$toFloat(customizations.margin.right),
				all: _elm_lang$core$List$sort(plotSummary.x.all)
			},
			y: {
				min: customizations.toDomainLowest(plotSummary.y.min),
				max: customizations.toDomainHighest(plotSummary.y.max),
				dataMin: plotSummary.y.min,
				dataMax: plotSummary.y.max,
				length: _elm_lang$core$Basics$toFloat(customizations.height),
				marginLower: _elm_lang$core$Basics$toFloat(customizations.margin.top),
				marginUpper: _elm_lang$core$Basics$toFloat(customizations.margin.bottom),
				all: plotSummary.y.all
			}
		};
	});
var _terezka$elm_plot$Plot$diff = F2(
	function (a, b) {
		return _elm_lang$core$Basics$abs(a - b);
	});
var _terezka$elm_plot$Plot$toNearestX = F2(
	function (summary, exactX) {
		var updateIfCloser = F2(
			function (closest, x) {
				return (_elm_lang$core$Native_Utils.cmp(
					A2(_terezka$elm_plot$Plot$diff, x, exactX),
					A2(_terezka$elm_plot$Plot$diff, closest, exactX)) > 0) ? closest : x;
			});
		var $default = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$head(summary.x.all));
		return A3(_elm_lang$core$List$foldl, updateIfCloser, $default, summary.x.all);
	});
var _terezka$elm_plot$Plot$unScalePoint = F4(
	function (summary, mouseX, mouseY, _p41) {
		var _p42 = _p41;
		return _elm_lang$core$Maybe$Just(
			{
				x: A2(
					_terezka$elm_plot$Plot$toNearestX,
					summary,
					A2(_terezka$elm_plot$Internal_Draw$toUnSVGX, summary, (summary.x.length * (mouseX - _p42.left)) / _p42.width)),
				y: A3(
					_elm_lang$core$Basics$clamp,
					summary.y.min,
					summary.y.max,
					A2(_terezka$elm_plot$Internal_Draw$toUnSVGY, summary, (summary.y.length * (mouseY - _p42.top)) / _p42.height))
			});
	});
var _terezka$elm_plot$Plot$plotPosition = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _debois$elm_dom$DOM$boundingClientRect,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$lazy(
				function (_p43) {
					return _debois$elm_dom$DOM$parentElement(_terezka$elm_plot$Plot$plotPosition);
				}),
			_1: {ctor: '[]'}
		}
	});
var _terezka$elm_plot$Plot$handleHint = F2(
	function (summary, toMsg) {
		return A4(
			_elm_lang$core$Json_Decode$map3,
			F3(
				function (x, y, r) {
					return toMsg(
						A4(_terezka$elm_plot$Plot$unScalePoint, summary, x, y, r));
				}),
			A2(_elm_lang$core$Json_Decode$field, 'clientX', _elm_lang$core$Json_Decode$float),
			A2(_elm_lang$core$Json_Decode$field, 'clientY', _elm_lang$core$Json_Decode$float),
			_debois$elm_dom$DOM$target(_terezka$elm_plot$Plot$plotPosition));
	});
var _terezka$elm_plot$Plot$viewActualJunk = F2(
	function (summary, _p44) {
		var _p45 = _p44;
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: A4(
					_terezka$elm_plot$Internal_Draw$place,
					summary,
					{x: _p45.x, y: _p45.y},
					0,
					0),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _p45.view,
				_1: {ctor: '[]'}
			});
	});
var _terezka$elm_plot$Plot$innerAttributes = function (customizations) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		customizations.attributes,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$viewBox(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'0 0 ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(customizations.width),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							_elm_lang$core$Basics$toString(customizations.height))))),
			_1: {ctor: '[]'}
		});
};
var _terezka$elm_plot$Plot$containerAttributes = F2(
	function (customizations, summary) {
		var _p46 = customizations.onHover;
		if (_p46.ctor === 'Just') {
			var _p47 = _p46._0;
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html_Events$on,
					'mousemove',
					A2(_terezka$elm_plot$Plot$handleHint, summary, _p47)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseLeave(
						_p47(_elm_lang$core$Maybe$Nothing)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id(customizations.id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: '0 auto'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$id(customizations.id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '0 auto'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _terezka$elm_plot$Plot$toClipPathId = function (_p48) {
	var _p49 = _p48;
	return A2(_elm_lang$core$Basics_ops['++'], 'elm-plot__clip-path__', _p49.id);
};
var _terezka$elm_plot$Plot$viewInterpolation = F7(
	function (customizations, summary, toLine, toArea, area, attributes, dataPoints) {
		var _p50 = area;
		if (_p50.ctor === 'Nothing') {
			return A2(
				_terezka$elm_plot$Internal_Draw$draw,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(_terezka$elm_plot$Internal_Colors$transparent),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$pinkStroke),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__series__interpolation'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$clipPath(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'url(#',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_terezka$elm_plot$Plot$toClipPathId(customizations),
											')'))),
								_1: attributes
							}
						}
					}
				},
				A2(
					toLine,
					summary,
					_terezka$elm_plot$Plot$points(dataPoints)));
		} else {
			return A2(
				_terezka$elm_plot$Internal_Draw$draw,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(_p50._0),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$pinkStroke),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__series__interpolation'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$clipPath(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'url(#',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_terezka$elm_plot$Plot$toClipPathId(customizations),
											')'))),
								_1: attributes
							}
						}
					}
				},
				A2(
					toArea,
					summary,
					_terezka$elm_plot$Plot$points(dataPoints)));
		}
	});
var _terezka$elm_plot$Plot$viewPath = F4(
	function (customizations, plotSummary, interpolation, dataPoints) {
		var _p51 = interpolation;
		switch (_p51.ctor) {
			case 'None':
				return A2(
					_elm_lang$svg$Svg$path,
					{ctor: '[]'},
					{ctor: '[]'});
			case 'Linear':
				return A7(_terezka$elm_plot$Plot$viewInterpolation, customizations, plotSummary, _terezka$elm_plot$Internal_Draw$linear, _terezka$elm_plot$Internal_Draw$linearArea, _p51._0, _p51._1, dataPoints);
			default:
				return A7(_terezka$elm_plot$Plot$viewInterpolation, customizations, plotSummary, _terezka$elm_plot$Internal_Draw$monotoneX, _terezka$elm_plot$Internal_Draw$monotoneXArea, _p51._0, _p51._1, dataPoints);
		}
	});
var _terezka$elm_plot$Plot$viewASeries = F4(
	function (customizations, plotSummary, _p52, dataPoints) {
		var _p53 = _p52;
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__series'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$map,
					_elm_lang$core$Basics$never,
					A4(_terezka$elm_plot$Plot$viewPath, customizations, plotSummary, _p53.interpolation, dataPoints)),
				_1: {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$viewDataPoints, plotSummary, dataPoints),
					_1: {ctor: '[]'}
				}
			});
	});
var _terezka$elm_plot$Plot$defineClipPath = F2(
	function (customizations, summary) {
		return A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$clipPath,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id(
							_terezka$elm_plot$Plot$toClipPathId(customizations)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$rect,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x(
									_elm_lang$core$Basics$toString(summary.x.marginLower)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y(
										_elm_lang$core$Basics$toString(summary.y.marginLower)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width(
											_elm_lang$core$Basics$toString(
												_terezka$elm_plot$Internal_Draw$length(summary.x))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height(
												_elm_lang$core$Basics$toString(
													_terezka$elm_plot$Internal_Draw$length(summary.y))),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: customizations.defs
			});
	});
var _terezka$elm_plot$Plot$addNiceReachForBars = function (_p54) {
	var _p55 = _p54;
	var _p57 = _p55.y;
	var _p56 = _p55.x;
	return _elm_lang$core$Native_Utils.update(
		_p55,
		{
			x: _elm_lang$core$Native_Utils.update(
				_p56,
				{min: _p56.min - 0.5, max: _p56.max + 0.5}),
			y: _elm_lang$core$Native_Utils.update(
				_p57,
				{
					min: A2(_elm_lang$core$Basics$min, _p57.min, 0),
					max: _p57.max
				})
		});
};
var _terezka$elm_plot$Plot$addNiceReachForArea = F2(
	function (area, _p58) {
		var _p59 = _p58;
		var _p62 = _p59.y;
		var _p61 = _p59;
		var _p60 = area;
		if (_p60.ctor === 'Nothing') {
			return _p61;
		} else {
			return _elm_lang$core$Native_Utils.update(
				_p61,
				{
					x: _p59.x,
					y: _elm_lang$core$Native_Utils.update(
						_p62,
						{
							min: A2(_elm_lang$core$Basics$min, _p62.min, 0),
							max: _p62.max
						})
				});
		}
	});
var _terezka$elm_plot$Plot$addNiceReachForSeries = function (series) {
	var _p63 = series.interpolation;
	switch (_p63.ctor) {
		case 'None':
			return _elm_lang$core$Basics$identity;
		case 'Linear':
			return _terezka$elm_plot$Plot$addNiceReachForArea(_p63._0);
		default:
			return _terezka$elm_plot$Plot$addNiceReachForArea(_p63._0);
	}
};
var _terezka$elm_plot$Plot$viewSeriesCustom = F3(
	function (customizations, series, data) {
		var addNiceReach = function (summary) {
			return A3(_elm_lang$core$List$foldl, _terezka$elm_plot$Plot$addNiceReachForSeries, summary, series);
		};
		var dataPoints = A2(
			_elm_lang$core$List$map,
			function (_p64) {
				var _p65 = _p64;
				return _p65.toDataPoints(data);
			},
			series);
		var allDataPoints = _elm_lang$core$List$concat(dataPoints);
		var summary = A3(_terezka$elm_plot$Plot$toPlotSummary, customizations, addNiceReach, allDataPoints);
		var viewJunks = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__junk'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					_terezka$elm_plot$Plot$viewActualJunk(summary),
					customizations.junk(summary))));
		var viewHorizontalAxes = A4(
			_terezka$elm_plot$Plot$viewHorizontalAxis,
			summary,
			customizations.horizontalAxis,
			{ctor: '[]'},
			A2(
				_elm_lang$core$List$filterMap,
				function (_) {
					return _.xTick;
				},
				allDataPoints));
		var viewGlitter = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$map,
				_elm_lang$core$Basics$never,
				A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__glitter'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$concatMap,
						_terezka$elm_plot$Plot$viewGlitterLines(summary),
						allDataPoints))));
		var viewHint = function () {
			var _p66 = A2(
				_elm_lang$core$List$filterMap,
				function (_) {
					return _.hint;
				},
				allDataPoints);
			if (_p66.ctor === '[]') {
				return _elm_lang$svg$Svg$text('');
			} else {
				return A2(
					_elm_lang$html$Html$map,
					_elm_lang$core$Basics$never,
					A2(customizations.hintContainer, summary, _p66));
			}
		}();
		var viewVerticalAxes = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__vertical-axes'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					A3(
						_elm_lang$core$List$map2,
						function (_p67) {
							return A2(
								_terezka$elm_plot$Plot$viewVerticalAxis,
								summary,
								function (_) {
									return _.axis;
								}(_p67));
						},
						series,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$filterMap(
								function (_) {
									return _.yTick;
								}),
							dataPoints)))));
		var viewActualSeries = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__all-series'),
					_1: {ctor: '[]'}
				},
				A3(
					_elm_lang$core$List$map2,
					A2(_terezka$elm_plot$Plot$viewASeries, customizations, summary),
					series,
					dataPoints)));
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(
					A2(_terezka$elm_plot$Plot$defineClipPath, customizations, summary)),
				_1: {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$viewHorizontalGrid, summary, customizations.grid.horizontal),
					_1: {
						ctor: '::',
						_0: A2(_terezka$elm_plot$Plot$viewVerticalGrid, summary, customizations.grid.vertical),
						_1: {
							ctor: '::',
							_0: viewActualSeries,
							_1: {
								ctor: '::',
								_0: viewHorizontalAxes,
								_1: {
									ctor: '::',
									_0: viewVerticalAxes,
									_1: {
										ctor: '::',
										_0: viewGlitter,
										_1: {
											ctor: '::',
											_0: viewJunks,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			A2(_terezka$elm_plot$Plot$containerAttributes, customizations, summary),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					_terezka$elm_plot$Plot$innerAttributes(customizations),
					children),
				_1: {
					ctor: '::',
					_0: viewHint,
					_1: {ctor: '[]'}
				}
			});
	});
var _terezka$elm_plot$Plot$closestToZero = F2(
	function (min, max) {
		return A3(_elm_lang$core$Basics$clamp, min, max, 0);
	});
var _terezka$elm_plot$Plot$viewActualBars = F3(
	function (summary, _p68, groups) {
		var _p69 = _p68;
		var _p75 = _p69.styles;
		var indexedHeights = function (group) {
			return A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				group.bars);
		};
		var barsPerGroup = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$length(_p75));
		var defaultWidth = 1 / barsPerGroup;
		var width = function () {
			var _p70 = _p69.maxWidth;
			if (_p70.ctor === 'Percentage') {
				return (defaultWidth * _elm_lang$core$Basics$toFloat(_p70._0)) / 100;
			} else {
				var _p71 = _p70._0;
				return (_elm_lang$core$Native_Utils.cmp(
					defaultWidth,
					A2(_terezka$elm_plot$Internal_Draw$unScaleValue, summary.x, _p71)) > 0) ? A2(_terezka$elm_plot$Internal_Draw$unScaleValue, summary.x, _p71) : defaultWidth;
			}
		}();
		var viewLabel = function (label) {
			return A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$transform(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'translate(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									A2(_terezka$elm_plot$Internal_Draw$scaleValue, summary.x, width / 2)),
								', -5)'))),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style('text-anchor: middle;'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: label,
					_1: {ctor: '[]'}
				});
		};
		var offset = F2(
			function (x, i) {
				return x + (width * (_elm_lang$core$Basics$toFloat(i) - (barsPerGroup / 2)));
			});
		var viewBar = F3(
			function (x, attributes, _p72) {
				var _p73 = _p72;
				var _p74 = _p73._1.height;
				return A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: A4(
							_terezka$elm_plot$Internal_Draw$place,
							summary,
							{
								x: A2(offset, x, _p73._0),
								y: A2(
									_elm_lang$core$Basics$max,
									A2(_terezka$elm_plot$Plot$closestToZero, summary.y.min, summary.y.max),
									_p74)
							},
							0,
							0),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$map,
							_elm_lang$core$Basics$never,
							A2(
								_elm_lang$core$Maybe$withDefault,
								_elm_lang$svg$Svg$text(''),
								A2(_elm_lang$core$Maybe$map, viewLabel, _p73._1.label))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$rect,
								A2(
									_elm_lang$core$Basics_ops['++'],
									attributes,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width(
											_elm_lang$core$Basics$toString(
												A2(_terezka$elm_plot$Internal_Draw$scaleValue, summary.x, width))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height(
												_elm_lang$core$Basics$toString(
													A2(
														_terezka$elm_plot$Internal_Draw$scaleValue,
														summary.y,
														_elm_lang$core$Basics$abs(_p74)))),
											_1: {ctor: '[]'}
										}
									}),
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					});
			});
		var viewGroup = F2(
			function (index, group) {
				return A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__bars__group'),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$core$List$map2,
						viewBar(
							_elm_lang$core$Basics$toFloat(index + 1)),
						_p75,
						indexedHeights(group)));
			});
		return _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$g,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__bars'),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$indexedMap, viewGroup, groups)));
	});
var _terezka$elm_plot$Plot$viewBarsCustom = F3(
	function (customizations, bars, data) {
		var toDataPoint = F3(
			function (index, group, _p76) {
				var _p77 = _p76;
				return {
					x: _elm_lang$core$Basics$toFloat(index) + 1,
					y: _p77.height,
					xLine: group.verticalLine(
						_elm_lang$core$Basics$toFloat(index) + 1),
					yLine: _elm_lang$core$Maybe$Nothing
				};
			});
		var toDataPoints = F2(
			function (index, group) {
				return A2(
					_elm_lang$core$List$map,
					A2(toDataPoint, index, group),
					group.bars);
			});
		var groups = bars.toGroups(data);
		var dataPoints = _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$indexedMap, toDataPoints, groups));
		var summary = A3(_terezka$elm_plot$Plot$toPlotSummary, customizations, _terezka$elm_plot$Plot$addNiceReachForBars, dataPoints);
		var viewGlitter = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$svg$Svg$map,
				_elm_lang$core$Basics$never,
				A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__glitter'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$concatMap,
						_terezka$elm_plot$Plot$viewGlitterLines(summary),
						dataPoints))));
		var xLabels = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (index, group) {
					return group.label(
						_elm_lang$core$Basics$toFloat(index) + 1);
				}),
			groups);
		var hints = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, group) {
						return group.hint(
							_elm_lang$core$Basics$toFloat(index) + 1);
					}),
				groups));
		var viewHint = function () {
			var _p78 = hints;
			if (_p78.ctor === '[]') {
				return _elm_lang$svg$Svg$text('');
			} else {
				return A2(
					_elm_lang$html$Html$map,
					_elm_lang$core$Basics$never,
					A2(customizations.hintContainer, summary, _p78));
			}
		}();
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(
					A2(_terezka$elm_plot$Plot$defineClipPath, customizations, summary)),
				_1: {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$viewHorizontalGrid, summary, customizations.grid.horizontal),
					_1: {
						ctor: '::',
						_0: A2(_terezka$elm_plot$Plot$viewVerticalGrid, summary, customizations.grid.vertical),
						_1: {
							ctor: '::',
							_0: A3(_terezka$elm_plot$Plot$viewActualBars, summary, bars, groups),
							_1: {
								ctor: '::',
								_0: A4(
									_terezka$elm_plot$Plot$viewHorizontalAxis,
									summary,
									customizations.horizontalAxis,
									xLabels,
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A3(
										_terezka$elm_plot$Plot$viewVerticalAxis,
										summary,
										bars.axis,
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: viewGlitter,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			A2(_terezka$elm_plot$Plot$containerAttributes, customizations, summary),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					_terezka$elm_plot$Plot$innerAttributes(customizations),
					children),
				_1: {
					ctor: '::',
					_0: viewHint,
					_1: {ctor: '[]'}
				}
			});
	});
var _terezka$elm_plot$Plot$displace = F2(
	function (x, y) {
		return _elm_lang$svg$Svg_Attributes$transform(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'translate(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(x),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(y),
							')')))));
	});
var _terezka$elm_plot$Plot$fullLine = F2(
	function (attributes, summary) {
		return {
			attributes: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$style('pointer-events: none;'),
				_1: attributes
			},
			start: summary.min,
			end: summary.max
		};
	});
var _terezka$elm_plot$Plot$simpleLabel = function (position) {
	return {
		position: position,
		view: A2(
			_terezka$elm_plot$Plot$viewLabel,
			{ctor: '[]'},
			_elm_lang$core$Basics$toString(position))
	};
};
var _terezka$elm_plot$Plot$simpleTick = function (position) {
	return {
		position: position,
		length: 5,
		attributes: {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
			_1: {ctor: '[]'}
		}
	};
};
var _terezka$elm_plot$Plot$simpleLine = function (summary) {
	return A2(
		_terezka$elm_plot$Plot$fullLine,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
			_1: {ctor: '[]'}
		},
		summary);
};
var _terezka$elm_plot$Plot$normalHintContainerInner = F2(
	function (isLeft, hints) {
		var margin = isLeft ? 10 : 10;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'margin',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'0 ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(margin),
									'px'))
						},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '5px 10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background', _1: _terezka$elm_plot$Internal_Colors$grey},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '2px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__hint'),
					_1: {ctor: '[]'}
				}
			},
			hints);
	});
var _terezka$elm_plot$Plot$viewFlyingHintContainer = F4(
	function (inner, _p79, summary, hints) {
		var _p80 = _p79;
		var _p81 = _p80.x;
		var isLeft = _elm_lang$core$Native_Utils.cmp(
			_p81 - summary.x.min,
			_terezka$elm_plot$Internal_Draw$range(summary.x) / 2) > 0;
		var direction = isLeft ? 'translateX(-100%)' : 'translateX(0)';
		var xOffset = (A2(_terezka$elm_plot$Internal_Draw$toSVGX, summary, _p81) * 100) / summary.x.length;
		var style = {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'top', _1: '25%'},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'left',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(xOffset),
							'%')
					},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'transform', _1: direction},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(style),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__hint'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(inner, isLeft, hints),
				_1: {ctor: '[]'}
			});
	});
var _terezka$elm_plot$Plot$flyingHintContainer = F4(
	function (inner, hovering, summary, hints) {
		var _p82 = hovering;
		if (_p82.ctor === 'Nothing') {
			return _elm_lang$svg$Svg$text('');
		} else {
			return A4(_terezka$elm_plot$Plot$viewFlyingHintContainer, inner, _p82._0, summary, hints);
		}
	});
var _terezka$elm_plot$Plot$normalHintContainer = function (summary) {
	return _elm_lang$html$Html$div(
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'margin-left',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(summary.x.marginLower),
							'px')
					},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _terezka$elm_plot$Plot$junk = F3(
	function (title, x, y) {
		return {x: x, y: y, view: title};
	});
var _terezka$elm_plot$Plot$normalBarLabel = F2(
	function (label, position) {
		return {
			position: position,
			view: A2(
				_terezka$elm_plot$Plot$viewLabel,
				{ctor: '[]'},
				label)
		};
	});
var _terezka$elm_plot$Plot$normalHint = function (y) {
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '5px'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'y: ',
					_elm_lang$core$Basics$toString(y))),
			_1: {ctor: '[]'}
		});
};
var _terezka$elm_plot$Plot$rangeFrameDot = F3(
	function (view, x, y) {
		return {
			view: _elm_lang$core$Maybe$Just(view),
			xLine: _elm_lang$core$Maybe$Nothing,
			yLine: _elm_lang$core$Maybe$Nothing,
			xTick: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleTick(x)),
			yTick: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleTick(y)),
			hint: _elm_lang$core$Maybe$Nothing,
			x: x,
			y: y
		};
	});
var _terezka$elm_plot$Plot$emphasizedDot = F3(
	function (view, x, y) {
		return {
			view: _elm_lang$core$Maybe$Just(view),
			xLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$fullLine(
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeDasharray('5, 5'),
							_1: {ctor: '[]'}
						}
					})),
			yLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$fullLine(
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeDasharray('5, 5'),
							_1: {ctor: '[]'}
						}
					})),
			xTick: _elm_lang$core$Maybe$Nothing,
			yTick: _elm_lang$core$Maybe$Nothing,
			hint: _elm_lang$core$Maybe$Nothing,
			x: x,
			y: y
		};
	});
var _terezka$elm_plot$Plot$onHovering = F3(
	function (stuff, hovering, x) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (p) {
				return _elm_lang$core$Native_Utils.eq(p.x, x) ? _elm_lang$core$Maybe$Just(stuff) : _elm_lang$core$Maybe$Nothing;
			},
			hovering);
	});
var _terezka$elm_plot$Plot$hintDot = F4(
	function (view, hovering, x, y) {
		return {
			view: _elm_lang$core$Maybe$Just(view),
			xLine: A3(
				_terezka$elm_plot$Plot$onHovering,
				_terezka$elm_plot$Plot$fullLine(
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
						_1: {ctor: '[]'}
					}),
				hovering,
				x),
			yLine: _elm_lang$core$Maybe$Nothing,
			xTick: _elm_lang$core$Maybe$Nothing,
			yTick: _elm_lang$core$Maybe$Nothing,
			hint: A3(
				_terezka$elm_plot$Plot$onHovering,
				_terezka$elm_plot$Plot$normalHint(y),
				hovering,
				x),
			x: x,
			y: y
		};
	});
var _terezka$elm_plot$Plot$dot = F3(
	function (view, x, y) {
		return {
			view: _elm_lang$core$Maybe$Just(view),
			xLine: _elm_lang$core$Maybe$Nothing,
			yLine: _elm_lang$core$Maybe$Nothing,
			xTick: _elm_lang$core$Maybe$Nothing,
			yTick: _elm_lang$core$Maybe$Nothing,
			hint: _elm_lang$core$Maybe$Nothing,
			x: x,
			y: y
		};
	});
var _terezka$elm_plot$Plot$clear = _terezka$elm_plot$Plot$dot(
	_elm_lang$svg$Svg$text(''));
var _terezka$elm_plot$Plot$triangle = _terezka$elm_plot$Plot$dot(
	_terezka$elm_plot$Plot$viewTriangle(_terezka$elm_plot$Internal_Colors$pinkStroke));
var _terezka$elm_plot$Plot$diamond = _terezka$elm_plot$Plot$dot(
	A3(_terezka$elm_plot$Plot$viewDiamond, 10, 10, _terezka$elm_plot$Internal_Colors$pinkStroke));
var _terezka$elm_plot$Plot$square = _terezka$elm_plot$Plot$dot(
	A2(_terezka$elm_plot$Plot$viewSquare, 10, _terezka$elm_plot$Internal_Colors$pinkStroke));
var _terezka$elm_plot$Plot$circle = _terezka$elm_plot$Plot$dot(
	A2(_terezka$elm_plot$Plot$viewCircle, 5, _terezka$elm_plot$Internal_Colors$pinkStroke));
var _terezka$elm_plot$Plot$PlotSummary = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _terezka$elm_plot$Plot$AxisSummary = F8(
	function (a, b, c, d, e, f, g, h) {
		return {min: a, max: b, dataMin: c, dataMax: d, marginLower: e, marginUpper: f, length: g, all: h};
	});
var _terezka$elm_plot$Plot$DataPoint = F8(
	function (a, b, c, d, e, f, g, h) {
		return {view: a, xLine: b, yLine: c, xTick: d, yTick: e, hint: f, x: g, y: h};
	});
var _terezka$elm_plot$Plot$customDot = _terezka$elm_plot$Plot$DataPoint;
var _terezka$elm_plot$Plot$Series = F3(
	function (a, b, c) {
		return {axis: a, interpolation: b, toDataPoints: c};
	});
var _terezka$elm_plot$Plot$customSeries = _terezka$elm_plot$Plot$Series;
var _terezka$elm_plot$Plot$Bars = F4(
	function (a, b, c, d) {
		return {axis: a, toGroups: b, styles: c, maxWidth: d};
	});
var _terezka$elm_plot$Plot$customGroups = _terezka$elm_plot$Plot$Bars;
var _terezka$elm_plot$Plot$BarGroup = F4(
	function (a, b, c, d) {
		return {label: a, hint: b, verticalLine: c, bars: d};
	});
var _terezka$elm_plot$Plot$customGroup = _terezka$elm_plot$Plot$BarGroup;
var _terezka$elm_plot$Plot$Bar = F2(
	function (a, b) {
		return {label: a, height: b};
	});
var _terezka$elm_plot$Plot$group = F2(
	function (label, heights) {
		return {
			label: _terezka$elm_plot$Plot$normalBarLabel(label),
			verticalLine: _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			hint: _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			bars: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$Bar(_elm_lang$core$Maybe$Nothing),
				heights)
		};
	});
var _terezka$elm_plot$Plot$hintGroup = F3(
	function (hovering, label, heights) {
		return {
			label: _terezka$elm_plot$Plot$normalBarLabel(label),
			verticalLine: A2(
				_terezka$elm_plot$Plot$onHovering,
				_terezka$elm_plot$Plot$fullLine(
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$darkGrey),
						_1: {ctor: '[]'}
					}),
				hovering),
			hint: function (g) {
				return A3(
					_terezka$elm_plot$Plot$onHovering,
					A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						A2(_elm_lang$core$List$map, _terezka$elm_plot$Plot$normalHint, heights)),
					hovering,
					g);
			},
			bars: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$Bar(_elm_lang$core$Maybe$Nothing),
				heights)
		};
	});
var _terezka$elm_plot$Plot$histogramBar = function (height) {
	return {
		label: _terezka$elm_plot$Plot$simpleLabel,
		verticalLine: _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
		hint: _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
		bars: {
			ctor: '::',
			_0: A2(_terezka$elm_plot$Plot$Bar, _elm_lang$core$Maybe$Nothing, height),
			_1: {ctor: '[]'}
		}
	};
};
var _terezka$elm_plot$Plot$PlotCustomizations = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {attributes: a, id: b, width: c, height: d, defs: e, margin: f, onHover: g, hintContainer: h, horizontalAxis: i, grid: j, junk: k, toDomainLowest: l, toDomainHighest: m, toRangeLowest: n, toRangeHighest: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _terezka$elm_plot$Plot$JunkCustomizations = F3(
	function (a, b, c) {
		return {x: a, y: b, view: c};
	});
var _terezka$elm_plot$Plot$GridLineCustomizations = F2(
	function (a, b) {
		return {attributes: a, position: b};
	});
var _terezka$elm_plot$Plot$AxisCustomizations = F5(
	function (a, b, c, d, e) {
		return {position: a, axisLine: b, ticks: c, labels: d, flipAnchor: e};
	});
var _terezka$elm_plot$Plot$LineCustomizations = F3(
	function (a, b, c) {
		return {attributes: a, start: b, end: c};
	});
var _terezka$elm_plot$Plot$TickCustomizations = F3(
	function (a, b, c) {
		return {attributes: a, length: b, position: c};
	});
var _terezka$elm_plot$Plot$LabelCustomizations = F2(
	function (a, b) {
		return {view: a, position: b};
	});
var _terezka$elm_plot$Plot$TempPlotSummary = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _terezka$elm_plot$Plot$Monotone = F2(
	function (a, b) {
		return {ctor: 'Monotone', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$Linear = F2(
	function (a, b) {
		return {ctor: 'Linear', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$None = {ctor: 'None'};
var _terezka$elm_plot$Plot$Fixed = function (a) {
	return {ctor: 'Fixed', _0: a};
};
var _terezka$elm_plot$Plot$Percentage = function (a) {
	return {ctor: 'Percentage', _0: a};
};
var _terezka$elm_plot$Plot$YeahGridsAreTotallyLame = {ctor: 'YeahGridsAreTotallyLame'};
var _terezka$elm_plot$Plot$clearGrid = _terezka$elm_plot$Plot$YeahGridsAreTotallyLame;
var _terezka$elm_plot$Plot$Grid = function (a) {
	return {ctor: 'Grid', _0: a};
};
var _terezka$elm_plot$Plot$customGrid = _terezka$elm_plot$Plot$Grid;
var _terezka$elm_plot$Plot$decentGrid = _terezka$elm_plot$Plot$customGrid(
	function (summary) {
		return A2(
			_elm_lang$core$List$map,
			_terezka$elm_plot$Plot$GridLineCustomizations(
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$grey),
					_1: {ctor: '[]'}
				}),
			_terezka$elm_plot$Plot$decentPositions(summary));
	});
var _terezka$elm_plot$Plot$SometimesYouDoNotHaveAnAxis = {ctor: 'SometimesYouDoNotHaveAnAxis'};
var _terezka$elm_plot$Plot$sometimesYouDoNotHaveAnAxis = _terezka$elm_plot$Plot$SometimesYouDoNotHaveAnAxis;
var _terezka$elm_plot$Plot$Axis = function (a) {
	return {ctor: 'Axis', _0: a};
};
var _terezka$elm_plot$Plot$customAxis = _terezka$elm_plot$Plot$Axis;
var _terezka$elm_plot$Plot$normalBarsAxis = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _terezka$elm_plot$Plot$closestToZero,
			axisLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleLine(summary)),
			ticks: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleTick,
				A3(_terezka$elm_plot$Plot$interval, 0, 1, summary)),
			labels: {ctor: '[]'},
			flipAnchor: false
		};
	});
var _terezka$elm_plot$Plot$normalAxis = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _terezka$elm_plot$Plot$closestToZero,
			axisLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleLine(summary)),
			ticks: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleTick,
				A2(
					_terezka$elm_plot$Plot$remove,
					0,
					_terezka$elm_plot$Plot$decentPositions(summary))),
			labels: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleLabel,
				A2(
					_terezka$elm_plot$Plot$remove,
					0,
					_terezka$elm_plot$Plot$decentPositions(summary))),
			flipAnchor: false
		};
	});
var _terezka$elm_plot$Plot$dots = function (toDataPoints) {
	return {axis: _terezka$elm_plot$Plot$normalAxis, interpolation: _terezka$elm_plot$Plot$None, toDataPoints: toDataPoints};
};
var _terezka$elm_plot$Plot$line = function (toDataPoints) {
	return {
		axis: _terezka$elm_plot$Plot$normalAxis,
		interpolation: A2(
			_terezka$elm_plot$Plot$Linear,
			_elm_lang$core$Maybe$Nothing,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$pinkStroke),
				_1: {ctor: '[]'}
			}),
		toDataPoints: toDataPoints
	};
};
var _terezka$elm_plot$Plot$area = function (toDataPoints) {
	return {
		axis: _terezka$elm_plot$Plot$normalAxis,
		interpolation: A2(
			_terezka$elm_plot$Plot$Linear,
			_elm_lang$core$Maybe$Just(_terezka$elm_plot$Internal_Colors$pinkFill),
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$pinkStroke),
				_1: {ctor: '[]'}
			}),
		toDataPoints: toDataPoints
	};
};
var _terezka$elm_plot$Plot$groups = function (toGroups) {
	return {
		axis: _terezka$elm_plot$Plot$normalAxis,
		toGroups: toGroups,
		styles: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill(_terezka$elm_plot$Internal_Colors$pinkFill),
				_1: {ctor: '[]'}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(_terezka$elm_plot$Internal_Colors$blueFill),
					_1: {ctor: '[]'}
				},
				_1: {ctor: '[]'}
			}
		},
		maxWidth: _terezka$elm_plot$Plot$Percentage(75)
	};
};
var _terezka$elm_plot$Plot$histogram = function (toGroups) {
	return {
		axis: _terezka$elm_plot$Plot$normalAxis,
		toGroups: toGroups,
		styles: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill(_terezka$elm_plot$Internal_Colors$pinkFill),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$stroke(_terezka$elm_plot$Internal_Colors$pinkStroke),
					_1: {ctor: '[]'}
				}
			},
			_1: {ctor: '[]'}
		},
		maxWidth: _terezka$elm_plot$Plot$Percentage(100)
	};
};
var _terezka$elm_plot$Plot$defaultSeriesPlotCustomizations = {
	attributes: {ctor: '[]'},
	defs: {ctor: '[]'},
	id: 'elm-plot',
	width: 647,
	height: 440,
	margin: {top: 20, right: 40, bottom: 20, left: 40},
	onHover: _elm_lang$core$Maybe$Nothing,
	hintContainer: _terezka$elm_plot$Plot$normalHintContainer,
	horizontalAxis: _terezka$elm_plot$Plot$normalAxis,
	grid: {horizontal: _terezka$elm_plot$Plot$clearGrid, vertical: _terezka$elm_plot$Plot$clearGrid},
	junk: _elm_lang$core$Basics$always(
		{ctor: '[]'}),
	toDomainLowest: _elm_lang$core$Basics$identity,
	toDomainHighest: _elm_lang$core$Basics$identity,
	toRangeLowest: _elm_lang$core$Basics$identity,
	toRangeHighest: _elm_lang$core$Basics$identity
};
var _terezka$elm_plot$Plot$defaultBarsPlotCustomizations = _elm_lang$core$Native_Utils.update(
	_terezka$elm_plot$Plot$defaultSeriesPlotCustomizations,
	{
		horizontalAxis: _terezka$elm_plot$Plot$normalBarsAxis,
		margin: {top: 20, right: 40, bottom: 40, left: 40}
	});
var _terezka$elm_plot$Plot$viewBars = _terezka$elm_plot$Plot$viewBarsCustom(_terezka$elm_plot$Plot$defaultBarsPlotCustomizations);
var _terezka$elm_plot$Plot$viewSeries = _terezka$elm_plot$Plot$viewSeriesCustom(_terezka$elm_plot$Plot$defaultSeriesPlotCustomizations);
var _terezka$elm_plot$Plot$clearAxis = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _terezka$elm_plot$Plot$closestToZero,
			axisLine: _elm_lang$core$Maybe$Nothing,
			ticks: {ctor: '[]'},
			labels: {ctor: '[]'},
			flipAnchor: false
		};
	});
var _terezka$elm_plot$Plot$axisAtMin = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _elm_lang$core$Basics$min,
			axisLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleLine(summary)),
			ticks: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleTick,
				_terezka$elm_plot$Plot$decentPositions(summary)),
			labels: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleLabel,
				_terezka$elm_plot$Plot$decentPositions(summary)),
			flipAnchor: false
		};
	});
var _terezka$elm_plot$Plot$axisAtMax = _terezka$elm_plot$Plot$customAxis(
	function (summary) {
		return {
			position: _elm_lang$core$Basics$max,
			axisLine: _elm_lang$core$Maybe$Just(
				_terezka$elm_plot$Plot$simpleLine(summary)),
			ticks: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleTick,
				_terezka$elm_plot$Plot$decentPositions(summary)),
			labels: A2(
				_elm_lang$core$List$map,
				_terezka$elm_plot$Plot$simpleLabel,
				_terezka$elm_plot$Plot$decentPositions(summary)),
			flipAnchor: true
		};
	});
