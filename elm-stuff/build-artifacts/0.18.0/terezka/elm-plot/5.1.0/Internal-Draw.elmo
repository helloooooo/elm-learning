var _terezka$elm_plot$Internal_Draw$sign = function (x) {
	return (_elm_lang$core$Native_Utils.cmp(x, 0) < 0) ? -1 : 1;
};
var _terezka$elm_plot$Internal_Draw$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.x - point0.x;
		return (!_elm_lang$core$Native_Utils.eq(h, 0)) ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;
	});
var _terezka$elm_plot$Internal_Draw$toH = F2(
	function (h0, h1) {
		return _elm_lang$core$Native_Utils.eq(h0, 0) ? ((_elm_lang$core$Native_Utils.cmp(h1, 0) < 0) ? (0 * -1) : h1) : h0;
	});
var _terezka$elm_plot$Internal_Draw$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.x - point1.x;
		var h0 = point1.x - point0.x;
		var s0h = A2(_terezka$elm_plot$Internal_Draw$toH, h0, h1);
		var s0 = (point1.y - point0.y) / s0h;
		var s1h = A2(_terezka$elm_plot$Internal_Draw$toH, h1, h0);
		var s1 = (point2.y - point1.y) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = (_terezka$elm_plot$Internal_Draw$sign(s0) + _terezka$elm_plot$Internal_Draw$sign(s1)) * A2(
			_elm_lang$core$Basics$min,
			A2(
				_elm_lang$core$Basics$min,
				_elm_lang$core$Basics$abs(s0),
				_elm_lang$core$Basics$abs(s1)),
			0.5 * _elm_lang$core$Basics$abs(p));
		return _elm_lang$core$Basics$isNaN(slope) ? 0 : slope;
	});
var _terezka$elm_plot$Internal_Draw$boolToString = function (bool) {
	return bool ? '0' : '1';
};
var _terezka$elm_plot$Internal_Draw$pointToString = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p1.x),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			_elm_lang$core$Basics$toString(_p1.y)));
};
var _terezka$elm_plot$Internal_Draw$pointsToString = function (points) {
	return A2(
		_elm_lang$core$String$join,
		',',
		A2(_elm_lang$core$List$map, _terezka$elm_plot$Internal_Draw$pointToString, points));
};
var _terezka$elm_plot$Internal_Draw$joinCommands = function (commands) {
	return A2(_elm_lang$core$String$join, ' ', commands);
};
var _terezka$elm_plot$Internal_Draw$yClosestToZero = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3.y;
	return A3(_elm_lang$core$Basics$clamp, _p4.min, _p4.max, 0);
};
var _terezka$elm_plot$Internal_Draw$length = function (axis) {
	return (axis.length - axis.marginLower) - axis.marginUpper;
};
var _terezka$elm_plot$Internal_Draw$range = function (axis) {
	return (!_elm_lang$core$Native_Utils.eq(axis.max - axis.min, 0)) ? (axis.max - axis.min) : 1;
};
var _terezka$elm_plot$Internal_Draw$scaleValue = F2(
	function (axis, value) {
		return (value * _terezka$elm_plot$Internal_Draw$length(axis)) / _terezka$elm_plot$Internal_Draw$range(axis);
	});
var _terezka$elm_plot$Internal_Draw$toSVGX = F2(
	function (_p5, value) {
		var _p6 = _p5;
		var _p7 = _p6.x;
		return A2(_terezka$elm_plot$Internal_Draw$scaleValue, _p7, value - _p7.min) + _p7.marginLower;
	});
var _terezka$elm_plot$Internal_Draw$toSVGY = F2(
	function (_p8, value) {
		var _p9 = _p8;
		var _p10 = _p9.y;
		return A2(_terezka$elm_plot$Internal_Draw$scaleValue, _p10, _p10.max - value) + _p10.marginLower;
	});
var _terezka$elm_plot$Internal_Draw$place = F4(
	function (plot, _p11, offsetX, offsetY) {
		var _p12 = _p11;
		return _elm_lang$svg$Svg_Attributes$transform(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'translate(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p12.x) + offsetX),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(
								A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p12.y) + offsetY),
							')')))));
	});
var _terezka$elm_plot$Internal_Draw$unScaleValue = F2(
	function (axis, v) {
		return (v * _terezka$elm_plot$Internal_Draw$range(axis)) / _terezka$elm_plot$Internal_Draw$length(axis);
	});
var _terezka$elm_plot$Internal_Draw$toUnSVGX = F2(
	function (_p13, value) {
		var _p14 = _p13;
		var _p15 = _p14.x;
		return A2(_terezka$elm_plot$Internal_Draw$unScaleValue, _p15, value - _p15.marginLower) + _p15.min;
	});
var _terezka$elm_plot$Internal_Draw$toUnSVGY = F2(
	function (_p16, value) {
		var _p17 = _p16;
		var _p18 = _p17.y;
		return (_terezka$elm_plot$Internal_Draw$range(_p18) - A2(_terezka$elm_plot$Internal_Draw$unScaleValue, _p18, value - _p18.marginLower)) + _p18.min;
	});
var _terezka$elm_plot$Internal_Draw$Point = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _terezka$elm_plot$Internal_Draw$stringifyCommand = function (command) {
	var _p19 = command;
	switch (_p19.ctor) {
		case 'Move':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'M',
				_terezka$elm_plot$Internal_Draw$pointToString(
					A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1)));
		case 'Line':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'L',
				_terezka$elm_plot$Internal_Draw$pointToString(
					A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1)));
		case 'HorizontalLine':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'H',
				_elm_lang$core$Basics$toString(_p19._0));
		case 'VerticalLine':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'V',
				_elm_lang$core$Basics$toString(_p19._0));
		case 'CubicBeziers':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'C',
				_terezka$elm_plot$Internal_Draw$pointsToString(
					{
						ctor: '::',
						_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1),
						_1: {
							ctor: '::',
							_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._2, _p19._3),
							_1: {
								ctor: '::',
								_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._4, _p19._5),
								_1: {ctor: '[]'}
							}
						}
					}));
		case 'CubicBeziersShort':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Q',
				_terezka$elm_plot$Internal_Draw$pointsToString(
					{
						ctor: '::',
						_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1),
						_1: {
							ctor: '::',
							_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._2, _p19._3),
							_1: {ctor: '[]'}
						}
					}));
		case 'QuadraticBeziers':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Q',
				_terezka$elm_plot$Internal_Draw$pointsToString(
					{
						ctor: '::',
						_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1),
						_1: {
							ctor: '::',
							_0: A2(_terezka$elm_plot$Internal_Draw$Point, _p19._2, _p19._3),
							_1: {ctor: '[]'}
						}
					}));
		case 'QuadraticBeziersShort':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'T',
				_terezka$elm_plot$Internal_Draw$pointToString(
					A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1)));
		case 'Arc':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'A',
				_terezka$elm_plot$Internal_Draw$joinCommands(
					{
						ctor: '::',
						_0: _terezka$elm_plot$Internal_Draw$pointToString(
							A2(_terezka$elm_plot$Internal_Draw$Point, _p19._0, _p19._1)),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p19._2),
							_1: {
								ctor: '::',
								_0: _terezka$elm_plot$Internal_Draw$boolToString(_p19._3),
								_1: {
									ctor: '::',
									_0: _terezka$elm_plot$Internal_Draw$boolToString(_p19._4),
									_1: {
										ctor: '::',
										_0: _terezka$elm_plot$Internal_Draw$pointToString(
											A2(_terezka$elm_plot$Internal_Draw$Point, _p19._5, _p19._6)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}));
		default:
			return 'Z';
	}
};
var _terezka$elm_plot$Internal_Draw$draw = F2(
	function (attributes, commands) {
		return A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$d(
					_terezka$elm_plot$Internal_Draw$joinCommands(
						A2(_elm_lang$core$List$map, _terezka$elm_plot$Internal_Draw$stringifyCommand, commands))),
				_1: attributes
			},
			{ctor: '[]'});
	});
var _terezka$elm_plot$Internal_Draw$AxisSummary = F8(
	function (a, b, c, d, e, f, g, h) {
		return {min: a, max: b, dataMin: c, dataMax: d, marginLower: e, marginUpper: f, length: g, all: h};
	});
var _terezka$elm_plot$Internal_Draw$PlotSummary = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _terezka$elm_plot$Internal_Draw$Close = {ctor: 'Close'};
var _terezka$elm_plot$Internal_Draw$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'Arc', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _terezka$elm_plot$Internal_Draw$QuadraticBeziersShort = F2(
	function (a, b) {
		return {ctor: 'QuadraticBeziersShort', _0: a, _1: b};
	});
var _terezka$elm_plot$Internal_Draw$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {ctor: 'QuadraticBeziers', _0: a, _1: b, _2: c, _3: d};
	});
var _terezka$elm_plot$Internal_Draw$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {ctor: 'CubicBeziersShort', _0: a, _1: b, _2: c, _3: d};
	});
var _terezka$elm_plot$Internal_Draw$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {ctor: 'CubicBeziers', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f};
	});
var _terezka$elm_plot$Internal_Draw$monotoneXCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.x - point0.x) / 3;
		return {
			ctor: '::',
			_0: A6(_terezka$elm_plot$Internal_Draw$CubicBeziers, point0.x + dx, point0.y + (dx * tangent0), point1.x - dx, point1.y - (dx * tangent1), point1.x, point1.y),
			_1: {ctor: '[]'}
		};
	});
var _terezka$elm_plot$Internal_Draw$monotoneXNext = F3(
	function (points, tangent0, commands) {
		monotoneXNext:
		while (true) {
			var _p20 = points;
			if ((_p20.ctor === '::') && (_p20._1.ctor === '::')) {
				if (_p20._1._1.ctor === '::') {
					var _p23 = _p20._1._1._0;
					var _p22 = _p20._1._0;
					var _p21 = _p20._0;
					var tangent1 = A3(_terezka$elm_plot$Internal_Draw$slope3, _p21, _p22, _p23);
					var nextCommands = A2(
						_elm_lang$core$Basics_ops['++'],
						commands,
						A4(_terezka$elm_plot$Internal_Draw$monotoneXCurve, _p21, _p22, tangent0, tangent1));
					var _v9 = {
						ctor: '::',
						_0: _p22,
						_1: {ctor: '::', _0: _p23, _1: _p20._1._1._1}
					},
						_v10 = tangent1,
						_v11 = nextCommands;
					points = _v9;
					tangent0 = _v10;
					commands = _v11;
					continue monotoneXNext;
				} else {
					var _p25 = _p20._1._0;
					var _p24 = _p20._0;
					var tangent1 = A3(_terezka$elm_plot$Internal_Draw$slope3, _p24, _p25, _p25);
					return A2(
						_elm_lang$core$Basics_ops['++'],
						commands,
						A4(_terezka$elm_plot$Internal_Draw$monotoneXCurve, _p24, _p25, tangent0, tangent1));
				}
			} else {
				return commands;
			}
		}
	});
var _terezka$elm_plot$Internal_Draw$monotoneXBegin = function (points) {
	var _p26 = points;
	if (((_p26.ctor === '::') && (_p26._1.ctor === '::')) && (_p26._1._1.ctor === '::')) {
		var _p29 = _p26._1._1._0;
		var _p28 = _p26._1._0;
		var _p27 = _p26._0;
		var tangent1 = A3(_terezka$elm_plot$Internal_Draw$slope3, _p27, _p28, _p29);
		var tangent0 = A3(_terezka$elm_plot$Internal_Draw$slope2, _p27, _p28, tangent1);
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A4(_terezka$elm_plot$Internal_Draw$monotoneXCurve, _p27, _p28, tangent0, tangent1),
			A3(
				_terezka$elm_plot$Internal_Draw$monotoneXNext,
				{
					ctor: '::',
					_0: _p28,
					_1: {ctor: '::', _0: _p29, _1: _p26._1._1._1}
				},
				tangent1,
				{ctor: '[]'}));
	} else {
		return {ctor: '[]'};
	}
};
var _terezka$elm_plot$Internal_Draw$VerticalLine = function (a) {
	return {ctor: 'VerticalLine', _0: a};
};
var _terezka$elm_plot$Internal_Draw$HorizontalLine = function (a) {
	return {ctor: 'HorizontalLine', _0: a};
};
var _terezka$elm_plot$Internal_Draw$Line = F2(
	function (a, b) {
		return {ctor: 'Line', _0: a, _1: b};
	});
var _terezka$elm_plot$Internal_Draw$lineCommand = function (_p30) {
	var _p31 = _p30;
	return A2(_terezka$elm_plot$Internal_Draw$Line, _p31.x, _p31.y);
};
var _terezka$elm_plot$Internal_Draw$areaEnd = F2(
	function (plot, points) {
		var _p32 = _elm_lang$core$List$head(
			_elm_lang$core$List$reverse(points));
		if (_p32.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_terezka$elm_plot$Internal_Draw$Line,
					_p32._0.x,
					_terezka$elm_plot$Internal_Draw$yClosestToZero(plot)),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _terezka$elm_plot$Internal_Draw$Move = F2(
	function (a, b) {
		return {ctor: 'Move', _0: a, _1: b};
	});
var _terezka$elm_plot$Internal_Draw$lineBegin = F2(
	function (plot, points) {
		var _p33 = points;
		if (_p33.ctor === '::') {
			return {
				ctor: '::',
				_0: A2(_terezka$elm_plot$Internal_Draw$Move, _p33._0.x, _p33._0.y),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _terezka$elm_plot$Internal_Draw$areaBegin = F2(
	function (plot, points) {
		var _p34 = points;
		if (_p34.ctor === '::') {
			var _p35 = _p34._0.x;
			return {
				ctor: '::',
				_0: A2(
					_terezka$elm_plot$Internal_Draw$Move,
					_p35,
					_terezka$elm_plot$Internal_Draw$yClosestToZero(plot)),
				_1: {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Internal_Draw$Line, _p35, _p34._0.y),
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _terezka$elm_plot$Internal_Draw$translateCommand = F2(
	function (plot, command) {
		var _p36 = command;
		switch (_p36.ctor) {
			case 'Move':
				return A2(
					_terezka$elm_plot$Internal_Draw$Move,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1));
			case 'Line':
				return A2(
					_terezka$elm_plot$Internal_Draw$Line,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1));
			case 'HorizontalLine':
				return _terezka$elm_plot$Internal_Draw$HorizontalLine(
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0));
			case 'VerticalLine':
				return _terezka$elm_plot$Internal_Draw$VerticalLine(
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._0));
			case 'CubicBeziers':
				return A6(
					_terezka$elm_plot$Internal_Draw$CubicBeziers,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1),
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._2),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._3),
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._4),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._5));
			case 'CubicBeziersShort':
				return A4(
					_terezka$elm_plot$Internal_Draw$CubicBeziersShort,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1),
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._2),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._3));
			case 'QuadraticBeziers':
				return A4(
					_terezka$elm_plot$Internal_Draw$QuadraticBeziers,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1),
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._2),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._3));
			case 'QuadraticBeziersShort':
				return A2(
					_terezka$elm_plot$Internal_Draw$QuadraticBeziersShort,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1));
			case 'Arc':
				return A7(
					_terezka$elm_plot$Internal_Draw$Arc,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._0),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._1),
					_p36._2,
					_p36._3,
					_p36._4,
					A2(_terezka$elm_plot$Internal_Draw$toSVGX, plot, _p36._5),
					A2(_terezka$elm_plot$Internal_Draw$toSVGY, plot, _p36._6));
			default:
				return _terezka$elm_plot$Internal_Draw$Close;
		}
	});
var _terezka$elm_plot$Internal_Draw$linear = F2(
	function (plot, points) {
		return A2(
			_elm_lang$core$List$map,
			_terezka$elm_plot$Internal_Draw$translateCommand(plot),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_terezka$elm_plot$Internal_Draw$lineBegin, plot, points),
				A2(_elm_lang$core$List$map, _terezka$elm_plot$Internal_Draw$lineCommand, points)));
	});
var _terezka$elm_plot$Internal_Draw$linearArea = F2(
	function (plot, points) {
		return A2(
			_elm_lang$core$List$map,
			_terezka$elm_plot$Internal_Draw$translateCommand(plot),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_terezka$elm_plot$Internal_Draw$areaBegin, plot, points),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$map, _terezka$elm_plot$Internal_Draw$lineCommand, points),
					A2(_terezka$elm_plot$Internal_Draw$areaEnd, plot, points))));
	});
var _terezka$elm_plot$Internal_Draw$monotoneX = F2(
	function (plot, points) {
		return A2(
			_elm_lang$core$List$map,
			_terezka$elm_plot$Internal_Draw$translateCommand(plot),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_terezka$elm_plot$Internal_Draw$lineBegin, plot, points),
				_terezka$elm_plot$Internal_Draw$monotoneXBegin(points)));
	});
var _terezka$elm_plot$Internal_Draw$monotoneXArea = F2(
	function (plot, points) {
		return A2(
			_elm_lang$core$List$map,
			_terezka$elm_plot$Internal_Draw$translateCommand(plot),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_terezka$elm_plot$Internal_Draw$areaBegin, plot, points),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_terezka$elm_plot$Internal_Draw$monotoneXBegin(points),
					A2(_terezka$elm_plot$Internal_Draw$areaEnd, plot, points))));
	});
