var _user$project$Main$viewgraph = function (model) {
	return model.graphtoggle ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '800px'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_terezka$elm_plot$Plot$viewSeries,
				{
					ctor: '::',
					_0: _terezka$elm_plot$Plot$line(
						_elm_lang$core$List$map(
							function (_p0) {
								var _p1 = _p0;
								return A2(_terezka$elm_plot$Plot$circle, _p1.x, _p1.y);
							})),
					_1: {ctor: '[]'}
				},
				model.tempdatas),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '800px'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_terezka$elm_plot$Plot$viewSeries,
				{
					ctor: '::',
					_0: _terezka$elm_plot$Plot$line(
						_elm_lang$core$List$map(
							function (_p2) {
								var _p3 = _p2;
								return A2(_terezka$elm_plot$Plot$circle, _p3.x, _p3.y);
							})),
					_1: {ctor: '[]'}
				},
				model.humandatas),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$white = _debois$elm_mdl$Material_Color$text(_debois$elm_mdl$Material_Color$white);
var _user$project$Main$createGetApiCommand = function (user) {
	var _p4 = user;
	if (_p4.ctor === 'Just') {
		return _p4._0.id;
	} else {
		return 1;
	}
};
var _user$project$Main$toUser = F3(
	function (t, s, m) {
		return {id: t, name: s, status: m};
	});
var _user$project$Main$toApiData = F4(
	function (i, h, t, ui) {
		return {id: i, human: h, temparture: t, userId: ui};
	});
var _user$project$Main$apidata = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$toApiData,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'human', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'temparture', _elm_lang$core$Json_Decode$float),
	A2(_elm_lang$core$Json_Decode$field, 'userId', _elm_lang$core$Json_Decode$int));
var _user$project$Main$user = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Main$toUser,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string));
var _user$project$Main$unwrapDatax = function (mdata) {
	var _p5 = mdata;
	if (_p5.ctor === 'Just') {
		return _p5._0.x;
	} else {
		return 0;
	}
};
var _user$project$Main$url_datas = 'http://localhost:3090/datas?userId=';
var _user$project$Main$requestApiData = function (id) {
	var url_post = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$url_datas,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(id),
			'&_sort=id&_order=desc&_limit=1'));
	return A2(
		_elm_lang$http$Http$get,
		url_post,
		_elm_lang$core$Json_Decode$list(_user$project$Main$apidata));
};
var _user$project$Main$url_users = 'http://localhost:3090/users';
var _user$project$Main$requestUsers = A2(
	_elm_lang$http$Http$get,
	_user$project$Main$url_users,
	_elm_lang$core$Json_Decode$list(_user$project$Main$user));
var _user$project$Main$Data = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$initData = {
	ctor: '::',
	_0: A2(_user$project$Main$Data, 2, 2),
	_1: {
		ctor: '::',
		_0: A2(_user$project$Main$Data, 2, 2),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Main$Data, 2, 2),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Main$Data, 2, 2),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Main$Data, 2, 2),
					_1: {ctor: '[]'}
				}
			}
		}
	}
};
var _user$project$Main$createTempData = F2(
	function (newdata, datas) {
		var _p6 = newdata;
		if (_p6.ctor === 'Just') {
			var _p7 = _p6._0;
			return (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(datas),
				5) < 0) ? A2(
				_elm_lang$core$List$append,
				datas,
				{
					ctor: '::',
					_0: A2(
						_user$project$Main$Data,
						_user$project$Main$unwrapDatax(
							_elm_lang$core$List$head(
								_elm_lang$core$List$reverse(datas))) + 1.0,
						_p7.temparture),
					_1: {ctor: '[]'}
				}) : A2(
				_elm_lang$core$List$drop,
				1,
				A2(
					_elm_lang$core$List$append,
					datas,
					{
						ctor: '::',
						_0: A2(
							_user$project$Main$Data,
							_user$project$Main$unwrapDatax(
								_elm_lang$core$List$head(
									_elm_lang$core$List$reverse(datas))) + 1.0,
							_p7.temparture),
						_1: {ctor: '[]'}
					}));
		} else {
			return {
				ctor: '::',
				_0: A2(_user$project$Main$Data, 1, 1),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Main$createHumanData = F2(
	function (newdata, datas) {
		var _p8 = newdata;
		if (_p8.ctor === 'Just') {
			var _p9 = _p8._0;
			return (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(datas),
				5) < 0) ? A2(
				_elm_lang$core$List$append,
				datas,
				{
					ctor: '::',
					_0: A2(
						_user$project$Main$Data,
						_user$project$Main$unwrapDatax(
							_elm_lang$core$List$head(
								_elm_lang$core$List$reverse(datas))) + 1.0,
						_p9.human),
					_1: {ctor: '[]'}
				}) : A2(
				_elm_lang$core$List$drop,
				1,
				A2(
					_elm_lang$core$List$append,
					datas,
					{
						ctor: '::',
						_0: A2(
							_user$project$Main$Data,
							_user$project$Main$unwrapDatax(
								_elm_lang$core$List$head(
									_elm_lang$core$List$reverse(datas))) + 1.0,
							_p9.human),
						_1: {ctor: '[]'}
					}));
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Main$ApiData = F4(
	function (a, b, c, d) {
		return {id: a, human: b, temparture: c, userId: d};
	});
var _user$project$Main$User = F3(
	function (a, b, c) {
		return {id: a, name: b, status: c};
	});
var _user$project$Main$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {loading: a, page: b, users: c, humandatas: d, tempdatas: e, graphtoggle: f, mdl: g};
	});
var _user$project$Main$RouteMain = {ctor: 'RouteMain'};
var _user$project$Main$RouteUserDetail = function (a) {
	return {ctor: 'RouteUserDetail', _0: a};
};
var _user$project$Main$RouteUsers = {ctor: 'RouteUsers'};
var _user$project$Main$RouteHome = {ctor: 'RouteHome'};
var _user$project$Main$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(_evancz$url_parser$UrlParser$map, _user$project$Main$RouteHome, _evancz$url_parser$UrlParser$top),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_user$project$Main$RouteUsers,
				_evancz$url_parser$UrlParser$s('users')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_user$project$Main$RouteUserDetail,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('users'),
						_evancz$url_parser$UrlParser$int)),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_user$project$Main$RouteMain,
						_evancz$url_parser$UrlParser$s('Main.elm')),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$init = function (location) {
	return {
		ctor: '_Tuple2',
		_0: A7(
			_user$project$Main$Model,
			_elm_lang$core$Maybe$Nothing,
			A2(_evancz$url_parser$UrlParser$parsePath, _user$project$Main$route, location),
			{ctor: '[]'},
			_user$project$Main$initData,
			_user$project$Main$initData,
			false,
			_debois$elm_mdl$Material$model),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$Msghuman = {ctor: 'Msghuman'};
var _user$project$Main$MsgTemp = {ctor: 'MsgTemp'};
var _user$project$Main$changeButtons = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A5(
				_debois$elm_mdl$Material_Button$render,
				_user$project$Main$Mdl,
				{
					ctor: '::',
					_0: 0,
					_1: {ctor: '[]'}
				},
				model.mdl,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$raised,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$colored,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$MsgTemp),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Temparture'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Main$Mdl,
					{
						ctor: '::',
						_0: 0,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$raised,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Button$colored,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$Msghuman),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Human'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$MsgUnti = function (a) {
	return {ctor: 'MsgUnti', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(
		_elm_lang$core$Time$every,
		_elm_lang$core$Time$second,
		function (_p10) {
			return _user$project$Main$MsgUnti(
				_elm_lang$core$List$head(model.users));
		});
};
var _user$project$Main$MsgNewApiData = function (a) {
	return {ctor: 'MsgNewApiData', _0: a};
};
var _user$project$Main$getApiData = function (id) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$MsgNewApiData,
		_user$project$Main$requestApiData(id));
};
var _user$project$Main$MsgNewUserDetail = function (a) {
	return {ctor: 'MsgNewUserDetail', _0: a};
};
var _user$project$Main$getUserDetail = function (n) {
	var url_post = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$url_users,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			_elm_lang$core$Basics$toString(n)));
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$MsgNewUserDetail,
		A2(_elm_lang$http$Http$get, url_post, _user$project$Main$user));
};
var _user$project$Main$MsgNewUsers = function (a) {
	return {ctor: 'MsgNewUsers', _0: a};
};
var _user$project$Main$getUsers = A2(_elm_lang$http$Http$send, _user$project$Main$MsgNewUsers, _user$project$Main$requestUsers);
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'MsgNewUrl':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p11._0)
				};
			case 'MsgUrlChange':
				var _p14 = _p11._0;
				var newpage = A2(_evancz$url_parser$UrlParser$parsePath, _user$project$Main$route, _p14);
				var _p12 = A2(_elm_lang$core$Debug$log, 'location=', _p14);
				var _p13 = newpage;
				if (_p13.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{page: newpage}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					switch (_p13._0.ctor) {
						case 'RouteHome':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{page: newpage}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						case 'RouteUsers':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{loading: newpage}),
								_1: _user$project$Main$getUsers
							};
						case 'RouteUserDetail':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{loading: newpage}),
								_1: _user$project$Main$getUserDetail(_p13._0._0)
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{loading: newpage}),
								_1: _user$project$Main$getUsers
							};
					}
				}
			case 'MsgNewUsers':
				if (_p11._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{page: model.loading, users: _p11._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'MsgNewUserDetail':
				if (_p11._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: model.loading,
								users: {
									ctor: '::',
									_0: _p11._0._0,
									_1: {ctor: '[]'}
								},
								humandatas: {ctor: '[]'},
								tempdatas: {
									ctor: '::',
									_0: A2(_user$project$Main$Data, 1, 30),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Main$Data, 2, 30),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Main$Data, 3, 30),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Main$Data, 4, 30),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Main$Data, 5, 30),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'MsgUnti':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loading: model.loading}),
					_1: _user$project$Main$getApiData(
						_user$project$Main$createGetApiCommand(_p11._0))
				};
			case 'MsgTemp':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{graphtoggle: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Msghuman':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{graphtoggle: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MsgNewApiData':
				if (_p11._0.ctor === 'Ok') {
					var _p15 = _p11._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								page: model.loading,
								humandatas: A2(
									_user$project$Main$createHumanData,
									_elm_lang$core$List$head(_p15),
									model.humandatas),
								tempdatas: A2(
									_user$project$Main$createTempData,
									_elm_lang$core$List$head(_p15),
									model.tempdatas)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p11._0, model);
		}
	});
var _user$project$Main$MsgUrlChange = function (a) {
	return {ctor: 'MsgUrlChange', _0: a};
};
var _user$project$Main$MsgNewUrl = function (a) {
	return {ctor: 'MsgNewUrl', _0: a};
};
var _user$project$Main$viewLink = F2(
	function (model, url) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Main$Mdl,
					{
						ctor: '::',
						_0: 0,
						_1: {ctor: '[]'}
					},
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$raised,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(
								_user$project$Main$MsgNewUrl(url)),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '0 6px'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(url),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$viewUsers = function (a) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'/users/',
		_elm_lang$core$Basics$toString(a.id));
	var _p16 = a.status;
	switch (_p16) {
		case 'red':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$div,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Elevation$e6,
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$center,
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$view,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Color$background(
											A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Red, _debois$elm_mdl$Material_Color$S500)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(
												_user$project$Main$MsgNewUrl(url)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$title,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$head,
												{
													ctor: '::',
													_0: _user$project$Main$white,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(a.name),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$text,
											{
												ctor: '::',
												_0: _user$project$Main$white,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(a.name),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		case 'yellow':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$div,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Elevation$e6,
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$center,
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$view,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Color$background(
											A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Amber, _debois$elm_mdl$Material_Color$S500)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(
												_user$project$Main$MsgNewUrl(url)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$title,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$head,
												{
													ctor: '::',
													_0: _user$project$Main$white,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(a.name),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$text,
											{
												ctor: '::',
												_0: _user$project$Main$white,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(a.name),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$div,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Elevation$e6,
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$center,
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$view,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '800px'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Color$background(
											A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Green, _debois$elm_mdl$Material_Color$S500)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(
												_user$project$Main$MsgNewUrl(url)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$title,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$head,
												{
													ctor: '::',
													_0: _user$project$Main$white,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(a.name),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$text,
											{
												ctor: '::',
												_0: _user$project$Main$white,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(a.name),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Main$viewPage = F2(
	function (route, model) {
		var _p17 = route;
		switch (_p17.ctor) {
			case 'RouteHome':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Welcomw to My Page!'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('これはテストページのトップです'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'RouteUsers':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('ユーザー一覧'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _user$project$Main$viewUsers, model.users)),
							_1: {ctor: '[]'}
						}
					});
			case 'RouteUserDetail':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{ctor: '[]'},
							A2(_elm_lang$core$List$map, _user$project$Main$viewUsers, model.users)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _user$project$Main$changeButtons(model),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$Main$viewgraph(model),
								_1: {ctor: '[]'}
							}
						}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('ユーザー一覧'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _user$project$Main$viewUsers, model.users)),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _user$project$Main$viewRoute = function (model) {
	var _p18 = A2(_elm_lang$core$Debug$log, 'maybeRoute=', model.page);
	var _p19 = model.page;
	if (_p19.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('404 Page Not Found!'),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(_user$project$Main$viewPage, _p19._0, model);
	}
};
var _user$project$Main$view = function (model) {
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$Teal,
		_debois$elm_mdl$Material_Color$Indigo,
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$fixedHeader,
				_1: {ctor: '[]'}
			},
			{
				header: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Life support User Manger'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				drawer: {ctor: '[]'},
				tabs: {
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				},
				main: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							_user$project$Main$viewLink(model),
							{
								ctor: '::',
								_0: '/',
								_1: {
									ctor: '::',
									_0: '/users/',
									_1: {ctor: '[]'}
								}
							})),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _user$project$Main$viewRoute(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$MsgUrlChange,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
